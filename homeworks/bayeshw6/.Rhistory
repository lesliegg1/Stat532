y.mat[1,] <- y.start
sd.scale <- 6
for(j in 1:4){
for (i in 2:nsim) {
y.cur <- y.mat[i-1, j]
y.cand <- draw.cand.fun3(y.cur, sd.scale)
logtarget.cur <- logtarget.fun(lambda, y.cur)
logtarget.cand <- logtarget.fun(lambda, y.cand)
logjump.cur <- logjump.fun(value=y.cur, mean=y.cand, sd.scale)
logjump.cand <- logjump.fun(value=y.cand, mean=y.cur, sd.scale)
log.r <- logtarget.cand - logtarget.cur + logjump.cur - logjump.cand
p.accept <- min(1, exp(log.r))
u <- runif(1)
ifelse(u <= p.accept, y.mat[i, j] <- y.cand, y.mat[i, j] <- y.cur)
jump.vec[i-1, j] <- ifelse(u <= p.accept, 1, 0)
r.vals[i-1, j] <- round(exp(log.r), digits=3)
}
}
par(mfrow=c(1,4))
burn.in <- 100
#plot draws from Metropolis Hastings algorithm with Poisson dist overlaid
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15))
points(0:24, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,2])/nsim, ylim=c(0, 0.15))
points(0:24, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,3])/nsim, ylim=c(0, 0.15))
points(0:24, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,4])/nsim, ylim=c(0, 0.15))
points(0:24, dpois(0:24, lambda), pch=16, lwd=2)
#2. Get a starting value for mu
y.start <- 3
#3. Define a few things before we start
nsim <- 1000  #number of iterations
y.mat <- matrix(NA, nrow=nsim, ncol=4) #empty matrix for y draws
lambda <- 2
r.vals <- matrix(NA, nrow = nsim-1, ncol = 4)
jump.vec <- matrix(NA, nrow = nsim-1, ncol = 4)
y.mat[1,] <- y.start
sd.scale <- 5
for(j in 1:4){
for (i in 2:nsim) {
y.cur <- y.mat[i-1, j]
y.cand <- draw.cand.fun3(y.cur, sd.scale)
logtarget.cur <- logtarget.fun(lambda, y.cur)
logtarget.cand <- logtarget.fun(lambda, y.cand)
logjump.cur <- logjump.fun(value=y.cur, mean=y.cand, sd.scale)
logjump.cand <- logjump.fun(value=y.cand, mean=y.cur, sd.scale)
log.r <- logtarget.cand - logtarget.cur + logjump.cur - logjump.cand
p.accept <- min(1, exp(log.r))
u <- runif(1)
ifelse(u <= p.accept, y.mat[i, j] <- y.cand, y.mat[i, j] <- y.cur)
jump.vec[i-1, j] <- ifelse(u <= p.accept, 1, 0)
r.vals[i-1, j] <- round(exp(log.r), digits=3)
}
}
par(mfrow=c(1,1))
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
points(0:24, dpois(0:24, lambda), pch=16, lwd=2)
par(mfrow=c(1,4))
burn.in <- 100
#plot draws from Metropolis Hastings algorithm with Poisson dist overlaid
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
points(0:24, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,2])/nsim, ylim=c(0, 0.3))
points(0:24, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,3])/nsim, ylim=c(0, 0.3))
points(0:24, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,4])/nsim, ylim=c(0, 0.3))
points(0:24, dpois(0:24, lambda), pch=16, lwd=2)
apply(jump.vec, 2, mean)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
points(seq(0.5, 24.5, by=1), dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
points(seq(1:24, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
points(seq(1:25, dpois(0:24, lambda), pch=16, lwd=2)
points(1:25, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
points(1:25, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
barplot(0:24, dpois(0:24, lambda), add=TRUE)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
barplot(table(rpois(10000, lambda)), add=TRUE)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
barplot(table(rpois(10000, lambda))/10000, add=TRUE)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1)
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.3))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2)
lambda <- 8
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2)
for(j in 1:4){
for (i in 2:nsim) {
y.cur <- y.mat[i-1, j]
y.cand <- draw.cand.fun3(y.cur, sd.scale)
logtarget.cur <- logtarget.fun(lambda, y.cur)
logtarget.cand <- logtarget.fun(lambda, y.cand)
logjump.cur <- logjump.fun(value=y.cur, mean=y.cand, sd.scale)
logjump.cand <- logjump.fun(value=y.cand, mean=y.cur, sd.scale)
log.r <- logtarget.cand - logtarget.cur + logjump.cur - logjump.cand
p.accept <- min(1, exp(log.r))
u <- runif(1)
ifelse(u <= p.accept, y.mat[i, j] <- y.cand, y.mat[i, j] <- y.cur)
jump.vec[i-1, j] <- ifelse(u <= p.accept, 1, 0)
r.vals[i-1, j] <- round(exp(log.r), digits=3)
}
}
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2)
#1. Specify a symmetric jumping/proposal distribution
# Negative Binomial distribution w/ mean the current value of y and tuning param sd.scale
draw.cand.fun3 <- function(cur, sd.scale) {
y.draw <- rnbinom(1, size=sd.scale, mu=(cur))
return(y.draw)
}
#draw.cand.fun3(2, 1)  #check the function
logjump.fun <- function(value, mean, sd.scale){
out <- log(dnbinom(value, size=sd.scale, mu=(mean)))
return(out)
}
#2. Write a function to evaluate the target distribution
#   at y for a given lambda
logtarget.fun <- function(lambda, y) {
out <- log(exp(-lambda)*lambda^y/factorial(y))
return(out)
}
#target.fun(8,3) check function
#2. Get a starting value for mu
y.start <- 7
#3. Define a few things before we start
nsim <- 1000  #number of iterations
y.mat <- matrix(NA, nrow=nsim, ncol=4) #empty matrix for y draws
lambda <- 8
r.vals <- matrix(NA, nrow = nsim-1, ncol = 4)
jump.vec <- matrix(NA, nrow = nsim-1, ncol = 4)
y.mat[1,] <- y.start
sd.scale <- 6
for(j in 1:4){
for (i in 2:nsim) {
y.cur <- y.mat[i-1, j]
y.cand <- draw.cand.fun3(y.cur, sd.scale)
logtarget.cur <- logtarget.fun(lambda, y.cur)
logtarget.cand <- logtarget.fun(lambda, y.cand)
logjump.cur <- logjump.fun(value=y.cur, mean=y.cand, sd.scale)
logjump.cand <- logjump.fun(value=y.cand, mean=y.cur, sd.scale)
log.r <- logtarget.cand - logtarget.cur + logjump.cur - logjump.cand
p.accept <- min(1, exp(log.r))
u <- runif(1)
ifelse(u <= p.accept, y.mat[i, j] <- y.cand, y.mat[i, j] <- y.cur)
jump.vec[i-1, j] <- ifelse(u <= p.accept, 1, 0)
r.vals[i-1, j] <- round(exp(log.r), digits=3)
}
}
par(mfrow=c(1,4))
burn.in <- 100
#plot draws from Metropolis Hastings algorithm with Poisson dist overlaid
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15), xlim=c(1, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2)
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2)
barplot(table(rpois(10000, lambda))/10000, density=1, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(y.mat[(burn.in+1):nsim,2])/nsim, ylim=c(0, 0.15))
points(1:25, dpois(0:24, lambda), pch=16, lwd=2)
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
par(mfrow=c(1,1))
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y.mat[(burn.in+1):nsim,1])/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
tabulate(y.mat[101:1000,1])
table(y.mat[(burn.in+1):nsim,1])
set.names(table(y.mat[(burn.in+1):nsim,1]), 0:18)
setNames(table(y.mat[(burn.in+1):nsim,1]), 0:18)
setNames(tabulate(y.mat[(burn.in+1):nsim,1]), 0:18)
y1 <- factor(y.mat[(burn.in+1):nsim,1], levels=c(0:18))
table(y1)
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y2)/nsim, ylim=c(0, 0.15))
y2 <- factor(y.mat[(burn.in+1):nsim,2], levels=c(0:18))
barplot(table(y2)/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
par(mfrow=c(1,4))
burn.in <- 100
y1 <- factor(y.mat[(burn.in+1):nsim,1], levels=c(0:18))
y2 <- factor(y.mat[(burn.in+1):nsim,2], levels=c(0:18))
y3 <- factor(y.mat[(burn.in+1):nsim,3], levels=c(0:18))
y4 <- factor(y.mat[(burn.in+1):nsim,4], levels=c(0:18))
#plot draws from Metropolis Hastings algorithm with Poisson dist overlaid
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y2)/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y3)/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y4)/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(19, 0.1, c("Analytical", "MH Draws"), density=c(1,0))
par(mfrow=c(1,4))
burn.in <- 100
y1 <- factor(y.mat[(burn.in+1):nsim,1], levels=c(0:18))
y2 <- factor(y.mat[(burn.in+1):nsim,2], levels=c(0:18))
y3 <- factor(y.mat[(burn.in+1):nsim,3], levels=c(0:18))
y4 <- factor(y.mat[(burn.in+1):nsim,4], levels=c(0:18))
#plot draws from Metropolis Hastings algorithm with Poisson dist overlaid
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(19, 0.1, c("Analytical", "MH Draws"), density=c(1,0))
barplot(table(y2)/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y3)/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y4)/nsim, ylim=c(0, 0.15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0))
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 22))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
par(mfrow=c(1,4))
burn.in <- 100
y1 <- factor(y.mat[(burn.in+1):nsim,1], levels=c(0:18))
y2 <- factor(y.mat[(burn.in+1):nsim,2], levels=c(0:18))
y3 <- factor(y.mat[(burn.in+1):nsim,3], levels=c(0:18))
y4 <- factor(y.mat[(burn.in+1):nsim,4], levels=c(0:18))
#plot draws from Metropolis Hastings algorithm with Poisson dist overlaid
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 25))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
barplot(table(y2)/nsim, ylim=c(0, 0.15), xlim=c(0, 25))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
barplot(table(y3)/nsim, ylim=c(0, 0.15), xlim=c(0, 25))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
barplot(table(y4)/nsim, ylim=c(0, 0.15), xlim=c(0,25))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
par(mfrow=c(1,4))
burn.in <- 100
y1 <- factor(y.mat[(burn.in+1):nsim,1], levels=c(0:18))
y2 <- factor(y.mat[(burn.in+1):nsim,2], levels=c(0:18))
y3 <- factor(y.mat[(burn.in+1):nsim,3], levels=c(0:18))
y4 <- factor(y.mat[(burn.in+1):nsim,4], levels=c(0:18))
#plot draws from Metropolis Hastings algorithm with Poisson dist overlaid
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 30))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
barplot(table(y2)/nsim, ylim=c(0, 0.15), xlim=c(0, 30))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
barplot(table(y3)/nsim, ylim=c(0, 0.15), xlim=c(0, 30))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
barplot(table(y4)/nsim, ylim=c(0, 0.15), xlim=c(0,30))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.5)
?barplot
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), col=c("white", "grey") cex=0.5)
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), col=c("white", "grey"), cex=0.5)
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 30))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(16, 0.1, c("Analytical", "MH Draws"), density=c(1,0), col=c("white", "grey"), cex=0.5)
#2. Get a starting value for mu
y.start <- 3
#3. Define a few things before we start
nsim <- 1000  #number of iterations
y.mat <- matrix(NA, nrow=nsim, ncol=4) #empty matrix for y draws
lambda <- 2
r.vals <- matrix(NA, nrow = nsim-1, ncol = 4)
jump.vec <- matrix(NA, nrow = nsim-1, ncol = 4)
y.mat[1,] <- y.start
sd.scale <- 3
barplot(table(y1)/nsim, ylim=c(0, 0.15), xlim=c(0, 10))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(1,0), cex=0.7)
barplot(table(y1)/nsim, xlim=c(0, 10))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(1,NULL), cex=0.7)
lambda <- 2
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(1,NULL), cex=0.7)
set.seed(15)
for(j in 1:4){
for (i in 2:nsim) {
y.cur <- y.mat[i-1, j]
y.cand <- draw.cand.fun3(y.cur, sd.scale)
logtarget.cur <- logtarget.fun(lambda, y.cur)
logtarget.cand <- logtarget.fun(lambda, y.cand)
logjump.cur <- logjump.fun(value=y.cur, mean=y.cand, sd.scale)
logjump.cand <- logjump.fun(value=y.cand, mean=y.cur, sd.scale)
log.r <- logtarget.cand - logtarget.cur + logjump.cur - logjump.cand
p.accept <- min(1, exp(log.r))
u <- runif(1)
ifelse(u <= p.accept, y.mat[i, j] <- y.cand, y.mat[i, j] <- y.cur)
jump.vec[i-1, j] <- ifelse(u <= p.accept, 1, 0)
r.vals[i-1, j] <- round(exp(log.r), digits=3)
}
}
par(mfrow=c(1,1))
par(mfrow=c(1,4))
burn.in <- 100
y1 <- factor(y.mat[(burn.in+1):nsim,1], levels=c(0:18))
y2 <- factor(y.mat[(burn.in+1):nsim,2], levels=c(0:18))
y3 <- factor(y.mat[(burn.in+1):nsim,3], levels=c(0:18))
y4 <- factor(y.mat[(burn.in+1):nsim,4], levels=c(0:18))
#plot draws from Metropolis Hastings algorithm with Poisson dist overlaid
barplot(table(y1)/nsim, xlim=c(0, 10))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(1,NULL), cex=0.7)
barplot(table(y1)/nsim, xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(1,NULL), cex=0.7)
barplot(table(y1)/nsim, xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=1, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(1,NULL), col=c("white", "grey"), cex=0.7)
barplot(table(y2)/nsim, xlim=c(0, 10))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=2, lwd=2, xlim=c(0, 20))
barplot(table(y1)/nsim, xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=2, lwd=2, xlim=c(0, 20))
barplot(table(y1)/nsim, xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=5, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(1,NULL), col=c("white", "grey"), cex=0.7)
barplot(table(y1)/nsim, xlim=c(0, 20))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=5, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(5,NULL), cex=0.7)
barplot(table(y1)/nsim, xlim=c(0, 15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=5, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(5,0), fill=c("white", "grey"), cex=0.7)
barplot(table(y2)/nsim, xlim=c(0, 15))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(5,0), fill=c("white", "grey"), cex=0.7)
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(5,0), fill=c("", "grey"), cex=0.7)
barplot(table(y1)/nsim, xlim=c(0, 15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=5, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(5,0), fill=c("", "grey"), cex=0.7)
barplot(table(y1)/nsim, xlim=c(0, 15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=5, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(5,0), col=c("", "grey"), cex=0.7)
source('~/.active-rstudio-document', echo=TRUE)
barplot(table(y1)/nsim, xlim=c(0, 15))
barplot(table(rpois(10000, lambda))/10000, add=TRUE, density=5, lwd=2, xlim=c(0, 20))
legend(8, 0.1, c("Analytical", "MH Draws"), density=c(10,0), cex=0.7)
setwd("~/Documents/Stat532/homeworks/bayeshw6")
##write model file first
cat("
model
{
y ~ dnorm(mu, 1/2)
mu~dnorm(mu0, tau0)
tau0 <-pow(sigma0, -2)
mu0 <- 10
sigma0 <- 5
}",
file="jags-intro.jags")
##jags call
library(R2jags)
set.seed(52)
data <- list(y=12)
intro.JAGs <-jags(model.file="jags-intro.jags", data = data, parameters.to.save = c("mu"), n.chains=4, n.iter=500)
head(as.mcmc(intro.JAGS)[[1]])
head(as.mcmc(intro.JAGs)[[1]])
##jags call
library(R2jags)
set.seed(52)
data <- list(y=12)
intro.JAGs <-jags(model.file="jags-intro.jags", data = data, parameters.to.save = c("mu"), n.chains=4, n.burnin=100, n.iter=500)
head(as.mcmc(intro.JAGs)[[1]])
length(as.mcmc(intro.JAGs)[[1]])
library(mvtnorm)
### Data: Number of adult flour beetles killed after 5 hours of exposure
##   to various levels of gaseous carbon disulphide (CS2)
dose <- c(1.6907, 1.7242, 1.7552, 1.7842, 1.8113, 1.8369, 1.8610, 1.8839)
killed <- c(6, 13, 18, 28, 52, 53, 61, 60)
exposed <- c(59,60,62,56,63,59,62,60)
### Some exploratory plots
prop.k <- killed/exposed
emp.logits <- log(prop.k/(1-prop.k))
#Plot data and check linearity assumptions
par(mfrow=c(2,1))
plot(dose, prop.k, pch=16, col=3, cex=1.2)
plot(dose, emp.logits, pch=16, col=3, cex=1.2) #note missing one because p.hat=1
prop.k <- killed/exposed
emp.logits <- log(prop.k/(1-prop.k))
#Plot data and check linearity assumptions
par(mfrow=c(2,1))
plot(dose, prop.k, pch=16, col=3, cex=1.2)
plot(dose, emp.logits, pch=16, col=3, cex=1.2) #note missing one because p.hat=1
#Fit model quickly in glm()
options(show.signif.stars=FALSE)
yes.no <- cbind(killed, (exposed-killed))
glm.out <- glm(yes.no~dose, family=binomial)
summary(glm.out)  #Check for overdispersion (Resid Dev=11.232 vs 6 d.f.)
dev.new()
plot(dose, emp.logits, pch=16, col=3, cex=1.2)
abline(glm.out) #model seems reasonable except for a bit of overdispersion
yes.no <- cbind(killed, (exposed-killed))
quasi.glm.out <- glm(yes.no~dose, family=quasibinomial)
summary(quasi.glm.out)  #1.671141= estimated dispersion param from Pearson resids
1-pchisq(11/232/6, 6)
1-pchisq(11.232/6, 6)
1-pchisq(11.232, 6)
dev.new()
dev.new()
emp.pm1.logits <- function(m1) {log((prop.k^(1/m1))/(1-(prop.k^(1/m1))))} #prop.k = observed proportions
dev.new()
plot(dose, emp.logits, pch=16, col=1, cex=1, ylab="logits", type="b", ylim=c(-10,10)) #note missing one because p.hat=1
points(dose, emp.pm1.logits(exp(-1.05)), col=2, type="b", pch=16)
points(dose, emp.pm1.logits(0.5), col=3, type="b", pch=16)
points(dose, emp.pm1.logits(1.5), col=4, type="b", pch=16)
points(dose, emp.pm1.logits(2), col=5, type="b", pch=16)
legend(1.80, -4, legend=c("m1=exp(-1.05)", "m1=0.5", "m1=1 (observed logits)",
"m1=1.5", "m1=2.0"), lwd=c(1,1,1,1,1), pch=c(16,16,16,16,16),
col=c(2,3,1,4,5), bty="n")
emp.pm1.logits <- function(m1) {log((prop.k^(1/m1))/(1-(prop.k^(1/m1))))} #prop.k = observed proportions
dev.new()
par(mfrow=c(1,1))
plot(dose, emp.logits, pch=16, col=1, cex=1, ylab="logits", type="b", ylim=c(-10,10)) #note missing one because p.hat=1
points(dose, emp.pm1.logits(exp(-1.05)), col=2, type="b", pch=16)
points(dose, emp.pm1.logits(0.5), col=3, type="b", pch=16)
points(dose, emp.pm1.logits(1.5), col=4, type="b", pch=16)
points(dose, emp.pm1.logits(2), col=5, type="b", pch=16)
legend(1.80, -4, legend=c("m1=exp(-1.05)", "m1=0.5", "m1=1 (observed logits)",
"m1=1.5", "m1=2.0"), lwd=c(1,1,1,1,1), pch=c(16,16,16,16,16),
col=c(2,3,1,4,5), bty="n")
lm(emp.pm1.logits(exp(-1.05))[1:7]~dose[1:7])$coef
pi.dose.fun <- function(w.vec, mu, sigma, m1){
((exp((w.vec-mu)/sigma))/(1 +exp((w.vec-mu)/sigma)))^m1
}
plot(dose, prop.k, pch=16, type="b", col=1, cex=1.2, ylim=c(0,1))
points(dose, pi.dose.fun(dose, mu=1.77 ,sig=0.0183, m1=1), col=4, type="b", pch=18) #Logistic regression
#points(dose, pi.dose.fun(dose, mu=1.54 ,sig=exp(-4.87), m1=exp(2.18)), col=5, type="b", pch=18) #Old #posterior mode
points(dose, pi.dose.fun(dose, mu=1.835, sig=(1/54.5), m1=0.35), col=2, type="b", pch=16) #Linear regression logit scale (above)
points(dose, pi.dose.fun(dose, mu=1.812, sig=exp(-4.01), m1=exp(-1.06)), col=3, type="b", pch=16) #mode of posterior
#points(dose, pi.dose.fun(dose, mu=1.55, sig=54.5, m1=0.35), col=4, type="b", pch=16) #
#points(dose, pi.dose.fun(dose, mu=1.55, sig=54.5, m1=0.35), col=5, type="b", pch=16)
legend(1.79, 0.3, legend=c("Observed proportions",  "From Logistic Regression", "Old Posterior Mode","Crude linear regression check", "Mode of posterior"),
lwd=c(1,1,1,1,1),pch=c(16,18,16,16,16), col=c(1,4,5,2,3), bty="n")
llik.fun <- function(theta.vec, dose.vec, y.vec, n.vec) {
mu <- theta.vec[1]
sig <- theta.vec[2]
m1 <- theta.vec[3]
x.vec <- (dose.vec - mu)/sig
llik.vec <- m1*y.vec*(x.vec-log(1+exp(x.vec))) + (n.vec - y.vec)*log(1-((exp(x.vec)/(1+exp(x.vec)))^m1))
out <- sum(llik.vec)
return(out)
}
llik.fun(c(0,1,1), dose.vec=dose, y.vec=killed, n.vec=exposed)
sum(log(dbinom(killed, exposed, prob=(exp(dose)/(1+exp(dose)))))) - sum(lchoose(exposed, killed))
llik.fun(c(1.2, 0.03, 0.35), dose.vec=dose, y.vec=killed, n.vec=exposed)
l.prior.fun <- function(theta.vec, a0=0.25, b0=0.25, c0=2, d0=10, e0=2.000004, f0=0.001) {
phi1 <- theta.vec[1]
phi2 <- log(theta.vec[2])
phi3 <- log(theta.vec[3])
log.p.phi1 <- log(dnorm(phi1, mean=c0, sd=d0))
log.p.phi2 <- (-2*e0*phi2) - (f0*(exp(-2*phi2)))
log.p.phi3 <- (phi3*a0) - (b0*exp(phi3))
log.p <- log.p.phi1 + log.p.phi2 + log.p.phi3 #assuming priors independent
return(log.p)
}
### This second function takes the transformed params as inputs
l.prior.fun2 <- function(phi.vec, a0=0.25, b0=0.25, c0=2, d0=10, e0=2.000004, f0=0.001) {
phi1 <- phi.vec[1]
phi2 <- phi.vec[2]
phi3 <- phi.vec[3]
log.p.phi1 <- log(dnorm(phi1, mean=c0, sd=d0))
log.p.phi2 <- -2*e0*phi2 - (f0*(exp(-2*phi2)))
log.p.phi3 <- phi3*a0 - (b0*exp(phi3))
log.p <- log.p.phi1 + log.p.phi2 + log.p.phi3 #assuming priors independent
return(log.p)
}
l.prior.fun(c(0.5, 0.03, 0.3))
l.prior.fun2(c(0.5, log(0.03), log(0.3)))
l.unpost.fun <- function(theta.vec, dose.vec, y.vec, n.vec) {
llik <- llik.fun(theta.vec, dose.vec=dose.vec, y.vec=y.vec, n.vec=n.vec)
lp <- l.prior.fun(theta.vec)
lout <- llik + lp
return(lout)
}
#takes transformed params as inputs
l.unpost.fun2 <- function(phi.vec, dose.vec, y.vec, n.vec) {
theta.vec <- c(phi.vec[1], exp(phi.vec[2]), exp(phi.vec[3]))
llik <- llik.fun(theta.vec, dose.vec=dose.vec, y.vec=y.vec, n.vec=n.vec)
lp <- l.prior.fun2(phi.vec)
lout <- llik + lp
return(lout)
}
l.unpost.fun(c(1.8, 1, 1), dose.vec=dose, y.vec=killed, n.vec=exposed)
l.unpost.fun2(c(1.8,log(1), log(1)), dose.vec=dose, y.vec=killed, n.vec=exposed)
library(pscl) #For the densiigamma() function with same parameterization as Gelman et al.
par(mfrow=c(1,3))
curve(dnorm(x,2,10), xlim=c(-30,30), main=expression(mu) )
install.packages("pscl")
100/54.5
library(pscl) #For the densiigamma() function with same parameterization as Gelman et al.
par(mfrow=c(1,3))
curve(dnorm(x,2,10), xlim=c(-30,30), main=expression(mu) )
curve(densigamma(x,2.000004,0.001), xlim=c(0.001,.01), main=expression(sigma^2)) #prior mean of .001 and sd of .5 for sig2
### should plot transformed version too
curve(dgamma(x,0.25,0.25), xlim=c(0,4), main=expression(m[1]))
