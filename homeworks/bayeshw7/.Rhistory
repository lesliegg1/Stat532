phi3 <- phi.vec[3]
log.p.phi1 <- log(dnorm(phi1, mean=c0, sd=d0))
log.p.phi2 <- -2*e0*phi2 - (f0*(exp(-2*phi2)))
log.p.phi3 <- phi3*a0 - (b0*exp(phi3))
log.p <- log.p.phi1 + log.p.phi2 + log.p.phi3 #assuming priors independent
return(log.p)
}
#find posterior prob for given values of parameters
#takes untransformed params as inputs
l.unpost.fun <- function(theta.vec, dose.vec, y.vec, n.vec) {
llik <- llik.fun(theta.vec, dose.vec=dose.vec, y.vec=y.vec, n.vec=n.vec)
lp <- l.prior.fun(theta.vec)
lout <- llik + lp
return(lout)
}
#takes transformed params as inputs
l.unpost.fun2 <- function(phi.vec, dose.vec, y.vec, n.vec) {
theta.vec <- c(phi.vec[1], exp(phi.vec[2]), exp(phi.vec[3]))
llik <- llik.fun(theta.vec, dose.vec=dose.vec, y.vec=y.vec, n.vec=n.vec)
lp <- l.prior.fun2(phi.vec)
lout <- llik + lp
return(lout)
}
#find mode and variance covariance matrix for phi1, phi2, phi3
optim.out <- optim(c(1.77, log(0.03), log(0.35)), l.unpost.fun2, dose.vec=dose,
y.vec=killed, n.vec=exposed, control=list(fnscale=-100),
method="Nelder-Mead", hessian=TRUE)
mode <- optim.out$par  #MODE [1]  1.812353 -4.010371 -1.056079
#estimated variance covariance matrix of parameter vector
VarCov <- solve(-optim.out$hessian)
### use mode as mean of jumping distribution
### use 2*VarCov as variance covariance matrix
set.seed(25)
nsim <- 1000  #number of iteration
phi.mat1 <- matrix(NA, nrow=nsim, ncol=3) #chain 1
phi.mat2 <- matrix(NA, nrow=nsim, ncol=3) #chain 2
phi.mat3 <- matrix(NA, nrow=nsim, ncol=3) #chain 3
jump.vec1 <- numeric(nsim-1) #keep track of when we jump (accept candidates)
jump.vec2 <- numeric(nsim-1)
jump.vec3 <- numeric(nsim-1)
phi.mat1[1,] <- c(1.8, -4, -1)  #1.543270 -4.874497  2.179276
phi.mat2[1,] <- c(1.5, -3.8, -1.2)
phi.mat3[1,] <- c(1.8, -4.5,  -0.8)
for (i in 2:nsim) {
phi.cur1 <- phi.mat1[i-1,]
phi.cur2 <- phi.mat2[i-1,]
phi.cur3 <- phi.mat3[i-1,]
phi.cand1 <- rmvnorm(1, mean=mode, sigma=2*VarCov)
phi.cand2 <- rmvnorm(1, mean=mode, sigma=2*VarCov)
phi.cand3 <- rmvnorm(1, mean=mode, sigma=2*VarCov)
log.r.num1 <- l.unpost.fun2(phi.cand1, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cur1, mean=phi.cand1, sigma=2*VarCov, log=TRUE)
log.r.num2 <- l.unpost.fun2(phi.cand2, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cur2, mean=phi.cand2, sigma=2*VarCov, log=TRUE)
log.r.num3 <- l.unpost.fun2(phi.cand3, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cur3, mean=phi.cand3, sigma=2*VarCov, log=TRUE)
log.r.denom1 <- l.unpost.fun2(phi.cur1, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cand1, mean=phi.cur1, sigma=2*VarCov, log=TRUE)
log.r.denom2 <- l.unpost.fun2(phi.cur2, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cand2, mean=phi.cur2, sigma=2*VarCov, log=TRUE)
log.r.denom3 <- l.unpost.fun2(phi.cur3, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cand3, mean=phi.cur3, sigma=2*VarCov, log=TRUE)
log.r1 <- log.r.num1 - log.r.denom1
log.r2 <- log.r.num2 - log.r.denom2
log.r3 <- log.r.num3 - log.r.denom3
p.accept1 <- min(1, exp(log.r1))
p.accept2 <- min(1, exp(log.r2))
p.accept3 <- min(1, exp(log.r3))
u.vec <- runif(3)
ifelse(u.vec[1] <= p.accept1, phi.mat1[i,]<- phi.cand1, phi.mat1[i,] <- phi.cur1)
ifelse(u.vec[2] <= p.accept2, phi.mat2[i,]<- phi.cand2, phi.mat2[i,] <- phi.cur2)
ifelse(u.vec[3] <= p.accept3, phi.mat3[i,]<- phi.cand3, phi.mat3[i,] <- phi.cur3)
jump.vec1[i-1] <- ifelse(u.vec[1] <= p.accept1, 1, 0)
jump.vec2[i-1] <- ifelse(u.vec[2] <= p.accept2, 1, 0)
jump.vec3[i-1] <- ifelse(u.vec[3] <= p.accept3, 1, 0)
}
mean(jump.vec1)
mean(jump.vec2)
mean(jump.vec3)
mean(jump.vec1)
mean(jump.vec2)
mean(jump.vec3)
#goal - obtain draw from theta1|theta2, theta3
#then plug it in get draw from theta2|theta1,theta3
#then plug it in and get draw from theta3|theta1,theta2
nchain <- 3
nsim <- 10000  #number of iteration
phi.mat <- array(NA, dim=c(nsim, 3, nchain)) #chain 1
jump.vec1 <- numeric(nsim-1) #keep track of when we jump (accept candidates)
jump.vec2 <- numeric(nsim-1)
jump.vec3 <- numeric(nsim-1)
phi.mat[1, 1:3, 1] <- c(1.8, -4, -1)  #1.543270 -4.874497  2.179276
phi.mat[1, 1:3, 2] <- c(1.85, -4.2, -0.8)
phi.mat[1, 1:3, 3] <- c(1.75, -3.8, -1.2)
sd.scale <- c(.01,.2,.2)
for(j in 1:nchain){
for (i in 2:nsim) {
phi.2 <- phi.mat[i-1, 2, j]
phi.3 <- phi.mat[i-1, 3, j]
phi.cur1 <- phi.mat[i-1, 1, j]
phi.cand1 <- rnorm(1, mean=phi.cur1, sd=sd.scale[1])
log.r.num1 <- l.unpost.fun2(c(phi.cand1, phi.2, phi.3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cur1, mean=phi.cand1, sd=sd.scale[1], log=TRUE)
log.r.denom1 <- l.unpost.fun2(c(phi.cur1, phi.2, phi.3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cand1, mean=phi.cur1, sd=sd.scale[1], log=TRUE)
log.r1 <- log.r.num1 - log.r.denom1
p.accept1 <- min(1, exp(log.r1))
u.vec <- runif(3)
ifelse(u.vec[1] <= p.accept1, phi.mat[i, 1, j]<- phi.cand1,
phi.mat[i, 1, j] <- phi.cur1)
jump.vec1[i-1] <- ifelse(u.vec[1] <= p.accept1, 1, 0)
#now draw theta2 given the values of theta1 and theta3
phi.1 <- phi.mat[i, 1, j]
phi.3 <- phi.mat[i-1, 3, j]
phi.cur2 <- phi.mat[i-1, 2, j]
phi.cand2 <- rnorm(1, mean=phi.cur2, sd=sd.scale[2])
log.r.num2 <- l.unpost.fun2(c(phi.1, phi.cand2, phi.3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cur2, mean=phi.cand2, sd=sd.scale[2], log=TRUE)
log.r.denom2 <- l.unpost.fun2(c(phi.1, phi.cur2, phi.3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cand2, mean=phi.cur2, sd=sd.scale[2], log=TRUE)
log.r2 <- log.r.num2 - log.r.denom2
p.accept2 <- min(1, exp(log.r2))
ifelse(u.vec[2] <= p.accept2, phi.mat[i, 2, j] <- phi.cand2,
phi.mat[i, 2, j] <- phi.cur2)
jump.vec2[i-1] <- ifelse(u.vec[2] <= p.accept2, 1, 0)
#now draw theta3 given the values of theta2 and theta3
phi.1 <- phi.mat[i, 1, j]
phi.2 <- phi.mat[i, 2, j]
phi.cur3 <- phi.mat[i-1, 3, j]
phi.cand3 <- rnorm(1, mean=phi.cur3, sd=sd.scale[3])
log.r.num3 <- l.unpost.fun2(c(phi.1, phi.2, phi.cand3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cur3, mean=phi.cand3, sd=sd.scale[3], log=TRUE)
log.r.denom3 <- l.unpost.fun2(c(phi.1, phi.2, phi.cur3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cand3, mean=phi.cur3, sd=sd.scale[3], log=TRUE)
log.r3 <- log.r.num3 - log.r.denom3
p.accept3 <- min(1, exp(log.r3))
ifelse(u.vec[3] <= p.accept3, phi.mat[i, 3, j] <- phi.cand3,
phi.mat[i, 3, j] <- phi.cur3)
jump.vec3[i-1] <- ifelse(u.vec[3] <= p.accept3, 1, 0)
}
}
mean(jump.vec1)
mean(jump.vec2)
mean(jump.vec3)
phi.post1 <- mcmc(phi.mat[,1,1:3])
phi.post2 <- mcmc(phi.mat[,2,1:3])
phi.post2 <- mcmc(phi.mat[,2,1:3])
phi.post3 <- mcmc(phi.mat[,3,1:3])
phi.mcmc <- mcmc.list(list(phi.post1, phi.post2, phi.post3))
phi1.mcmc <- mcmc.list(list(phi1.post))
phi2.mcmc <- mcmc.list(list(phi2.post))
phi3.mcmc <- mcmc.list(list(phi3.post))
phi1.post <- mcmc(phi.mat[,1,1:3])
phi2.post <- mcmc(phi.mat[,2,1:3])
phi3.post <- mcmc(phi.mat[,3,1:3])
#use to put all draws from the 3 chains in one list
phi1.mcmc <- mcmc.list(list(phi1.post))
phi2.mcmc <- mcmc.list(list(phi2.post))
phi3.mcmc <- mcmc.list(list(phi3.post))
eff <- effectiveSize(phi1.mcmc)
##Acceptance rates?
mean(jump.vec1)
mean(jump.vec2)
mean(jump.vec3)
## Use coda to help
library(coda)
phi.post1 <- mcmc(phi.mat1)
phi.post2 <- mcmc(phi.mat2)
phi.post3 <- mcmc(phi.mat3)
#use to put all draws from the 3 chains in one list
phi.mcmc <- mcmc.list(list(phi.post1, phi.post2, phi.post3))
summary(phi.mcmc)
plot(phi.mcmc)
head(phi.mcmc)
raftery.diag(phi1.mcmc)
phi1.post <- mcmc(phi.mat[,1:3,1])
phi2.post <- mcmc(phi.mat[,1:3,2])
phi3.post <- mcmc(phi.mat[,1:3,3])
#use to put all draws from the 3 chains in one list
phi1.mcmc <- mcmc.list(list(phi1.post))
phi2.mcmc <- mcmc.list(list(phi2.post))
phi3.mcmc <- mcmc.list(list(phi3.post))
raftery.diag(phi1.mcmc)
raftery.diag(phi2.mcmc)
raftery.diag(phi3.mcmc)
eff <- effectiveSize(phi1.mcmc)
eff
phi.mcmc <- mcmc.list(list(phi1.post, phi2.post, phi3.post))
eff <- effectiveSize(phi.mcmc)
eff
raftery.diag(phi.mcmc)
eff <- effectiveSize(phi.mcmc)
eff
gelman.plot(phi.mcmc)
gd <- gelman.diag(phi.mcmc)  #Can't do b/c need at least 2 chains
gd
head(phi1.post)
length(phi1.post)
gelman.plot(phi.mcmc)
#goal - obtain draw from theta1|theta2, theta3
#then plug it in get draw from theta2|theta1,theta3
#then plug it in and get draw from theta3|theta1,theta2
nchain <- 3
nsim <- 50000  #number of iteration
phi.mat <- array(NA, dim=c(nsim, 3, nchain)) #chain 1
jump.vec1 <- numeric(nsim-1) #keep track of when we jump (accept candidates)
jump.vec2 <- numeric(nsim-1)
jump.vec3 <- numeric(nsim-1)
phi.mat[1, 1:3, 1] <- c(1.8, -4, -1)  #1.543270 -4.874497  2.179276
phi.mat[1, 1:3, 2] <- c(1.85, -4.2, -0.8)
phi.mat[1, 1:3, 3] <- c(1.75, -3.8, -1.2)
sd.scale <- c(.01,.2,.2)
for(j in 1:nchain){
for (i in 2:nsim) {
phi.2 <- phi.mat[i-1, 2, j]
phi.3 <- phi.mat[i-1, 3, j]
phi.cur1 <- phi.mat[i-1, 1, j]
phi.cand1 <- rnorm(1, mean=phi.cur1, sd=sd.scale[1])
log.r.num1 <- l.unpost.fun2(c(phi.cand1, phi.2, phi.3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cur1, mean=phi.cand1, sd=sd.scale[1], log=TRUE)
log.r.denom1 <- l.unpost.fun2(c(phi.cur1, phi.2, phi.3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cand1, mean=phi.cur1, sd=sd.scale[1], log=TRUE)
log.r1 <- log.r.num1 - log.r.denom1
p.accept1 <- min(1, exp(log.r1))
u.vec <- runif(3)
ifelse(u.vec[1] <= p.accept1, phi.mat[i, 1, j]<- phi.cand1,
phi.mat[i, 1, j] <- phi.cur1)
jump.vec1[i-1] <- ifelse(u.vec[1] <= p.accept1, 1, 0)
#now draw theta2 given the values of theta1 and theta3
phi.1 <- phi.mat[i, 1, j]
phi.3 <- phi.mat[i-1, 3, j]
phi.cur2 <- phi.mat[i-1, 2, j]
phi.cand2 <- rnorm(1, mean=phi.cur2, sd=sd.scale[2])
log.r.num2 <- l.unpost.fun2(c(phi.1, phi.cand2, phi.3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cur2, mean=phi.cand2, sd=sd.scale[2], log=TRUE)
log.r.denom2 <- l.unpost.fun2(c(phi.1, phi.cur2, phi.3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cand2, mean=phi.cur2, sd=sd.scale[2], log=TRUE)
log.r2 <- log.r.num2 - log.r.denom2
p.accept2 <- min(1, exp(log.r2))
ifelse(u.vec[2] <= p.accept2, phi.mat[i, 2, j] <- phi.cand2,
phi.mat[i, 2, j] <- phi.cur2)
jump.vec2[i-1] <- ifelse(u.vec[2] <= p.accept2, 1, 0)
#now draw theta3 given the values of theta2 and theta3
phi.1 <- phi.mat[i, 1, j]
phi.2 <- phi.mat[i, 2, j]
phi.cur3 <- phi.mat[i-1, 3, j]
phi.cand3 <- rnorm(1, mean=phi.cur3, sd=sd.scale[3])
log.r.num3 <- l.unpost.fun2(c(phi.1, phi.2, phi.cand3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cur3, mean=phi.cand3, sd=sd.scale[3], log=TRUE)
log.r.denom3 <- l.unpost.fun2(c(phi.1, phi.2, phi.cur3), dose.vec=dose,
y.vec=killed, n.vec=exposed) +
dnorm(phi.cand3, mean=phi.cur3, sd=sd.scale[3], log=TRUE)
log.r3 <- log.r.num3 - log.r.denom3
p.accept3 <- min(1, exp(log.r3))
ifelse(u.vec[3] <= p.accept3, phi.mat[i, 3, j] <- phi.cand3,
phi.mat[i, 3, j] <- phi.cur3)
jump.vec3[i-1] <- ifelse(u.vec[3] <= p.accept3, 1, 0)
}
}
##Look at chains
plot(seq(1:nsim), phi.mat[,1,1], type="l", ylab=expression(phi[1]))
lines(seq(1:nsim), phi.mat[,1,2], col=2)
lines(seq(1:nsim), phi.mat[,1,3], col=3)
plot(seq(1:nsim), phi.mat[,2,1], type="l", ylab=expression(phi[2]))
lines(seq(1:nsim), phi.mat[,2,2], col=2)
lines(seq(1:nsim), phi.mat[,2,3], col=3)
plot(seq(1:nsim), phi.mat[,3,1], type="l", ylab=expression(phi[3]))
lines(seq(1:nsim), phi.mat[,3,2], col=2)
lines(seq(1:nsim), phi.mat[,3,3], col=3)
zoom <- 2000
##Look at chains
plot(seq(1:zoom), phi.mat[1:zoom,1,1], type="l", ylab=expression(phi[1]))
lines(seq(1:zoom), phi.mat[1:zoom,1,2], col=2)
lines(seq(1:zoom), phi.mat[1:zoom,1,3], col=3)
plot(seq(1:zoom), phi.mat[,2,1], type="l", ylab=expression(phi[2]))
lines(seq(1:zoom), phi.mat[1:zoom,2,2], col=2)
lines(seq(1:zoom), phi.mat[1:zoom,2,3], col=3)
plot(seq(1:zoom), phi.mat[,3,1], type="l", ylab=expression(phi[3]))
lines(seq(1:zoom), phi.mat[1:zoom,3,2], col=2)
lines(seq(1:zoom), phi.mat[1:zoom,3,3], col=3)
zoom <- 2000
##Look at chains
plot(seq(1:zoom), phi.mat[1:zoom,1,1], type="l", ylab=expression(phi[1]))
lines(seq(1:zoom), phi.mat[1:zoom,1,2], col=2)
lines(seq(1:zoom), phi.mat[1:zoom,1,3], col=3)
plot(seq(1:zoom), phi.mat[1:zoom,2,1], type="l", ylab=expression(phi[2]))
lines(seq(1:zoom), phi.mat[1:zoom,2,2], col=2)
lines(seq(1:zoom), phi.mat[1:zoom,2,3], col=3)
plot(seq(1:zoom), phi.mat[1:zoom,3,1], type="l", ylab=expression(phi[3]))
lines(seq(1:zoom), phi.mat[1:zoom,3,2], col=2)
lines(seq(1:zoom), phi.mat[1:zoom,3,3], col=3)
phi1.post <- mcmc(phi.mat[,1:3,1])
phi2.post <- mcmc(phi.mat[,1:3,2])
phi3.post <- mcmc(phi.mat[,1:3,3])
#use to put all draws from the 3 chains in one list
phi.mcmc <- mcmc.list(list(phi1.post, phi2.post, phi3.post))
library(coda)
require(xtable)
#Look at some other convergence diagnostics
eff <- effectiveSize(phi.mcmc)
gd <- gelman.diag(phi.mcmc)  #Can't do b/c need at least 2 chains
#gelman.plot(phi.mcmc)
#geweke.diag(phi.mcmc)
#heidel.diag(phi.mcmc)
# raftery.diag(phi.mcmc)
eff
zoom <- 4000
##Look at chains
plot(seq(1:zoom), phi.mat[1:zoom,1,1], type="l", ylab=expression(phi[1]))
lines(seq(1:zoom), phi.mat[1:zoom,1,2], col=2)
lines(seq(1:zoom), phi.mat[1:zoom,1,3], col=3)
plot(seq(1:zoom), phi.mat[1:zoom,2,1], type="l", ylab=expression(phi[2]))
lines(seq(1:zoom), phi.mat[1:zoom,2,2], col=2)
lines(seq(1:zoom), phi.mat[1:zoom,2,3], col=3)
plot(seq(1:zoom), phi.mat[1:zoom,3,1], type="l", ylab=expression(phi[3]))
lines(seq(1:zoom), phi.mat[1:zoom,3,2], col=2)
lines(seq(1:zoom), phi.mat[1:zoom,3,3], col=3)
burnin <- 2000
phi1.post <- mcmc(phi.mat[(burnin+1):nsim,1:3,1])
phi2.post <- mcmc(phi.mat[(burnin+1):nsim,1:3,2])
phi3.post <- mcmc(phi.mat[(burnin+1):nsim,1:3,3])
#use to put all draws from the 3 chains in one list
phi.mcmc <- mcmc.list(list(phi1.post, phi2.post, phi3.post))
library(coda)
require(xtable)
#Look at some other convergence diagnostics
eff <- effectiveSize(phi.mcmc)
gd <- gelman.diag(phi.mcmc)  #Can't do b/c need at least 2 chains
#gelman.plot(phi.mcmc)
#geweke.diag(phi.mcmc)
#heidel.diag(phi.mcmc)
# raftery.diag(phi.mcmc)
eff
burnin <- 1000
phi1.post <- mcmc(phi.mat[(burnin+1):nsim,1:3,1])
phi2.post <- mcmc(phi.mat[(burnin+1):nsim,1:3,2])
phi3.post <- mcmc(phi.mat[(burnin+1):nsim,1:3,3])
#use to put all draws from the 3 chains in one list
phi.mcmc <- mcmc.list(list(phi1.post, phi2.post, phi3.post))
library(coda)
require(xtable)
#Look at some other convergence diagnostics
eff <- effectiveSize(phi.mcmc)
gd <- gelman.diag(phi.mcmc)  #Can't do b/c need at least 2 chains
#gelman.plot(phi.mcmc)
#geweke.diag(phi.mcmc)
#heidel.diag(phi.mcmc)
# raftery.diag(phi.mcmc)
eff
mean(jump.vec1)
mean(jump.vec2)
mean(jump.vec3)
burnin <- 500
phi1.post <- mcmc(phi.mat[(burnin+1):nsim,1:3,1])
phi2.post <- mcmc(phi.mat[(burnin+1):nsim,1:3,2])
phi3.post <- mcmc(phi.mat[(burnin+1):nsim,1:3,3])
#use to put all draws from the 3 chains in one list
phi.mcmc <- mcmc.list(list(phi1.post, phi2.post, phi3.post))
library(coda)
require(xtable)
#Look at some other convergence diagnostics
eff <- effectiveSize(phi.mcmc)
gd <- gelman.diag(phi.mcmc)  #Can't do b/c need at least 2 chains
#gelman.plot(phi.mcmc)
#geweke.diag(phi.mcmc)
#heidel.diag(phi.mcmc)
# raftery.diag(phi.mcmc)
eff
gd
mu.draws <- phi.mat1[,1]
head(mu.draws)
mu.draws <- c(phi.mat1[,1], phi.mat2[,1], phi.mat3[,1])
length(mu.draws)
sigma.draws <- sqrt(exp(2*c(phi.mat1[,2], phi.mat2[,2], phi.mat3[,2])))
head(sigma.draws)
length(sigma.draws)
m1.draws <- exp(c(phi.mat1[,3], phi.mat2[,3], phi.mat3[,3]))
head(m1.draws)
### use mode as mean of jumping distribution
### use 2*VarCov as variance covariance matrix
set.seed(25)
nsim <- 1000  #number of iteration
phi.mat1 <- matrix(NA, nrow=nsim, ncol=3) #chain 1
phi.mat2 <- matrix(NA, nrow=nsim, ncol=3) #chain 2
phi.mat3 <- matrix(NA, nrow=nsim, ncol=3) #chain 3
jump.vec1 <- numeric(nsim-1) #keep track of when we jump (accept candidates)
jump.vec2 <- numeric(nsim-1)
jump.vec3 <- numeric(nsim-1)
phi.mat1[1,] <- c(1.8, -4, -1)  #1.543270 -4.874497  2.179276
phi.mat2[1,] <- c(1.5, -3.8, -1.2)
phi.mat3[1,] <- c(1.8, -4.5,  -0.8)
for (i in 2:nsim) {
phi.cur1 <- phi.mat1[i-1,]
phi.cur2 <- phi.mat2[i-1,]
phi.cur3 <- phi.mat3[i-1,]
phi.cand1 <- rmvnorm(1, mean=mode, sigma=2*VarCov)
phi.cand2 <- rmvnorm(1, mean=mode, sigma=2*VarCov)
phi.cand3 <- rmvnorm(1, mean=mode, sigma=2*VarCov)
log.r.num1 <- l.unpost.fun2(phi.cand1, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cur1, mean=phi.cand1, sigma=2*VarCov, log=TRUE)
log.r.num2 <- l.unpost.fun2(phi.cand2, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cur2, mean=phi.cand2, sigma=2*VarCov, log=TRUE)
log.r.num3 <- l.unpost.fun2(phi.cand3, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cur3, mean=phi.cand3, sigma=2*VarCov, log=TRUE)
log.r.denom1 <- l.unpost.fun2(phi.cur1, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cand1, mean=phi.cur1, sigma=2*VarCov, log=TRUE)
log.r.denom2 <- l.unpost.fun2(phi.cur2, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cand2, mean=phi.cur2, sigma=2*VarCov, log=TRUE)
log.r.denom3 <- l.unpost.fun2(phi.cur3, dose.vec=dose, y.vec=killed, n.vec=exposed) +
dmvnorm(phi.cand3, mean=phi.cur3, sigma=2*VarCov, log=TRUE)
log.r1 <- log.r.num1 - log.r.denom1
log.r2 <- log.r.num2 - log.r.denom2
log.r3 <- log.r.num3 - log.r.denom3
p.accept1 <- min(1, exp(log.r1))
p.accept2 <- min(1, exp(log.r2))
p.accept3 <- min(1, exp(log.r3))
u.vec <- runif(3)
ifelse(u.vec[1] <= p.accept1, phi.mat1[i,]<- phi.cand1, phi.mat1[i,] <- phi.cur1)
ifelse(u.vec[2] <= p.accept2, phi.mat2[i,]<- phi.cand2, phi.mat2[i,] <- phi.cur2)
ifelse(u.vec[3] <= p.accept3, phi.mat3[i,]<- phi.cand3, phi.mat3[i,] <- phi.cur3)
jump.vec1[i-1] <- ifelse(u.vec[1] <= p.accept1, 1, 0)
jump.vec2[i-1] <- ifelse(u.vec[2] <= p.accept2, 1, 0)
jump.vec3[i-1] <- ifelse(u.vec[3] <= p.accept3, 1, 0)
}
par(mfrow=c(1,3))
burnin <- 200
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
sigma.draws <- sqrt(exp(2*c(phi.mat1[(burnin+1):nsim,2], phi.mat2[(burnin+1):nsim,2], phi.mat3[(burnin+1):nsim,2])))
m1.draws <- exp(c(phi.mat1[(burnin+1):nsim,3], phi.mat2[(burnin+1):nsim,3], phi.mat3[(burnin+1):nsim,3]))
hist(c(mu.draws[(burnin+1):nsim,1], phi.mat2[,1], phi.mat3[,1]), nclass=50, xlab=expression(phi[1]), freq=FALSE, main = expression(phi[1]))
hist(c(sigma.draws[(burnin+1):nsim ,2], phi.mat2[,2], phi.mat3[,2]), nclass=50, xlab=expression(phi[2]), freq=FALSE, main = expression(phi[2]))
hist(c(m1.draws[(burnin+1):nsim ,3], phi.mat2[,3], phi.mat3[,3]), nclass=50, xlab=expression(phi[3]), freq=FALSE, main = expression(phi[3]))
m1.draws
hist(mu.draws, nclass=50, xlab=expression(phi[1]), freq=FALSE, main = expression(phi[1]))
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
sigma.draws <- sqrt(exp(2*c(phi.mat1[(burnin+1):nsim,2], phi.mat2[(burnin+1):nsim,2], phi.mat3[(burnin+1):nsim,2])))
m1.draws <- exp(c(phi.mat1[(burnin+1):nsim,3], phi.mat2[(burnin+1):nsim,3], phi.mat3[(burnin+1):nsim,3]))
hist(mu.draws, nclass=50, xlab=expression(phi[1]), freq=FALSE, main = expression(phi[1]))
hist(sigma.draws, nclass=50, xlab=expression(phi[2]), freq=FALSE, main = expression(phi[2]))
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
hist(mu.draws, nclass=50, xlab=expression(phi[1]), freq=FALSE, main = expression(phi[1]))
hist(mu.draws, nclass=30, xlab=expression(phi[1]), freq=FALSE, main = expression(phi[1]))
hist(sigma.draws, nclass=50, xlab=expression(phi[2]), freq=FALSE, main = expression(phi[2]))
hist(m1.draws, nclass=50, xlab=expression(phi[3]), freq=FALSE, main = expression(phi[3]))
hist(m1.draws, nclass=30, xlab=expression(phi[3]), freq=FALSE, main = expression(phi[3]))
par(mfrow=c(1,3))
burnin <- 200
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
sigma.draws <- sqrt(exp(2*c(phi.mat1[(burnin+1):nsim,2], phi.mat2[(burnin+1):nsim,2], phi.mat3[(burnin+1):nsim,2])))
m1.draws <- exp(c(phi.mat1[(burnin+1):nsim,3], phi.mat2[(burnin+1):nsim,3], phi.mat3[(burnin+1):nsim,3]))
hist(mu.draws, nclass=30, xlab=expression(phi[1]), freq=FALSE, main = expression(mu))
hist(sigma.draws, nclass=50, xlab=expression(phi[2]), freq=FALSE, main = expression(sigma))
hist(m1.draws, nclass=30, xlab=expression(phi[3]), freq=FALSE, main = expression(m[1]))
par(mfrow=c(1,3))
burnin <- 200
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
sigma.draws <- sqrt(exp(2*c(phi.mat1[(burnin+1):nsim,2], phi.mat2[(burnin+1):nsim,2], phi.mat3[(burnin+1):nsim,2])))
m1.draws <- exp(c(phi.mat1[(burnin+1):nsim,3], phi.mat2[(burnin+1):nsim,3], phi.mat3[(burnin+1):nsim,3]))
hist(mu.draws, nclass=30, xlab=expression(phi[1]), freq=FALSE, main = expression(mu))
hist(sigma.draws, nclass=30, xlab=expression(phi[2]), freq=FALSE, main = expression(sigma))
hist(m1.draws, nclass=30, xlab=expression(phi[3]), freq=FALSE, main = expression(m[1]))
par(mfrow=c(1,3))
burnin <- 200
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
sigma.draws <- sqrt(exp(2*c(phi.mat1[(burnin+1):nsim,2], phi.mat2[(burnin+1):nsim,2], phi.mat3[(burnin+1):nsim,2])))
m1.draws <- exp(c(phi.mat1[(burnin+1):nsim,3], phi.mat2[(burnin+1):nsim,3], phi.mat3[(burnin+1):nsim,3]))
hist(mu.draws, nclass=30, xlab=expression(mu), freq=FALSE, main = expression(mu))
hist(sigma.draws, nclass=30, xlab=expression(sigma), freq=FALSE, main = expression(sigma))
hist(m1.draws, nclass=30, xlab=expression(m[1]), freq=FALSE, main = expression(m[1]))
par(mfrow=c(1,3))
burnin <- 200
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
sigma.draws <- sqrt(exp(2*c(phi.mat1[(burnin+1):nsim,2], phi.mat2[(burnin+1):nsim,2], phi.mat3[(burnin+1):nsim,2])))
m1.draws <- exp(c(phi.mat1[(burnin+1):nsim,3], phi.mat2[(burnin+1):nsim,3], phi.mat3[(burnin+1):nsim,3]))
hist(mu.draws, nclass=30, xlab=expression(mu), freq=FALSE, main = expression(mu))
hist(sigma.draws, nclass=20, xlab=expression(sigma), freq=FALSE, main = expression(sigma))
hist(m1.draws, nclass=30, xlab=expression(m[1]), freq=FALSE, main = expression(m[1]))
par(mfrow=c(1,3))
burnin <- 200
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
sigma.draws <- sqrt(exp(2*c(phi.mat1[(burnin+1):nsim,2], phi.mat2[(burnin+1):nsim,2], phi.mat3[(burnin+1):nsim,2])))
m1.draws <- exp(c(phi.mat1[(burnin+1):nsim,3], phi.mat2[(burnin+1):nsim,3], phi.mat3[(burnin+1):nsim,3]))
hist(mu.draws, nclass=30, xlab=expression(mu), freq=FALSE, main = expression(mu))
hist(sigma.draws, nclass=25, xlab=expression(sigma), freq=FALSE, main = expression(sigma))
hist(m1.draws, nclass=30, xlab=expression(m[1]), freq=FALSE, main = expression(m[1]))
par(mfrow=c(1,3))
burnin <- 200
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
sigma.draws <- sqrt(exp(2*c(phi.mat1[(burnin+1):nsim,2], phi.mat2[(burnin+1):nsim,2], phi.mat3[(burnin+1):nsim,2])))
m1.draws <- exp(c(phi.mat1[(burnin+1):nsim,3], phi.mat2[(burnin+1):nsim,3], phi.mat3[(burnin+1):nsim,3]))
hist(mu.draws, nclass=30, xlab=expression(mu), freq=FALSE, main = expression(mu))
hist(sigma.draws, nclass=29, xlab=expression(sigma), freq=FALSE, main = expression(sigma))
hist(m1.draws, nclass=30, xlab=expression(m[1]), freq=FALSE, main = expression(m[1]))
par(mfrow=c(1,3))
burnin <- 200
mu.draws <- c(phi.mat1[,1], phi.mat2[(burnin+1):nsim,1], phi.mat3[(burnin+1):nsim,1])
sigma.draws <- sqrt(exp(2*c(phi.mat1[(burnin+1):nsim,2], phi.mat2[(burnin+1):nsim,2], phi.mat3[(burnin+1):nsim,2])))
m1.draws <- exp(c(phi.mat1[(burnin+1):nsim,3], phi.mat2[(burnin+1):nsim,3], phi.mat3[(burnin+1):nsim,3]))
hist(mu.draws, nclass=30, xlab=expression(mu), freq=FALSE, main = expression(mu))
hist(sigma.draws, nclass=27, xlab=expression(sigma), freq=FALSE, main = expression(sigma))
hist(m1.draws, nclass=30, xlab=expression(m[1]), freq=FALSE, main = expression(m[1]))
