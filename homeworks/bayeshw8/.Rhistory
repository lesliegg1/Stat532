### M-H version  ####
for (j in 1:length(y.data)) {
draw.and.jump <- MH.draw.cc.phi(phi.mat[t-1,j], tuning=4, y.i=y.data[j], m=m[j], mu=mu.vec[t], tau=tau.vec[t])
phi.mat[t,j] <- draw.and.jump[1]
jump.vec[t-1] <- draw.and.jump[2]
}
}
#mean(jump.vec)
#jump.vec[1:10]
par(mfrow=c(3,1))
plot(1:n.gibbs, mu.vec, type="n", main=expression(mu), ylab=expression(mu),  xlab="iteration")
lines(1:n.gibbs, mu.vec, col="red")
abline(h=mean(mu.vec), lwd=2, col=2)  #posterior mean
abline(h=mean(logit(y.data/m)), lwd=2, col=4) #logit of average of observed proportions
plot(1:n.gibbs, tau.vec, type="n", main=expression(tau), ylab=expression(tau),  xlab="iteration")
lines(1:n.gibbs, tau.vec, col="red")
abline(h=mean(tau.vec), lwd=2, col=2)  #posterior mean
abline(h=1/var(logit(y.data/m)), lwd=2, col=4)
#SD scale, instead of precision or variance
plot(1:n.gibbs, sqrt(1/tau.vec), type="n", main=expression(sqrt(1/tau)), ylab=expression(sqrt(1/tau)),  xlab="iteration")
lines(1:n.gibbs, sqrt(1/tau.vec), col="red")
abline(h=1, lwd=3, col="darkgreen") #true tau
abline(h=sqrt(1/mean(tau.vec)), lwd=2, col=2)  #posterior mean
abline(h=sd(logit(y.data/m)), lwd=2, col=4)  #observed sd in observed phi's
#plot conditional distributions for phis
par(mfrow=c(3,1))
for (j in 1:3){
plot(1:n.gibbs, phi.mat[,j], type="l", ylab=bquote(phi[.(j)]), main=bquote(phi[.(j)]),
xlab="iteration")
abline(h=logit(y.data[j]/m[j]), lwd=1, col="blue") #observed proportion
}
burn.in <- 1:50
par(mfrow=c(1,2))
hist(mu.vec[-burn.in], col=gray(0.85), nclass=100, freq=F, main="Posterior for mu")
abline(v=mean(mu.vec[-burn.in]), lwd=3, col=2)  #posterior mean
#abline(v=mean(logit(y.data/m)), lwd=2, col=4) #logit of average of observed proportions, #like empirical phi.bar
legend(-11,.65, legend=c("posterior mean"), col=c(2,4), lty=c(1,1,1), lwd=c(2,2,2), bty="n", cex=0.5)
hist(tau.vec[-burn.in], col=gray(0.85), nclass=100, freq=F, main="Posterior for tau") #true tau
abline(v=mean(tau.vec[-burn.in]), lwd=2, col=2)  #posterior mean
#abline(v=(1/var(logit(y.data/m))), lwd=2, col=4) #observed data summary
#dev.new()
par(mfrow=c(1,3))
for (j in 1:3){
hist(phi.mat[-burn.in,j], nclass=50, main=bquote(phi[.(j)]), ylab=bquote(phi[.(j)]),
xlab="iteration", col=gray(0.9))
abline(v=y.data[j]/m, lwd=1, col="blue") #observed proportion
abline(v=mean(phi.mat[-burn.in,j]), lwd=1, col=2) #observed proportion
}
#dev.new()
par(mfrow=c(2,3))
for (j in 1:6){
hist(phi.mat[-burn.in,j], nclass=50, main=bquote(phi[.(j)]), ylab=bquote(phi[.(j)]),
xlab="iteration", col=gray(0.9))
abline(v=y.data[j]/m, lwd=1, col="blue") #observed proportion
abline(v=mean(phi.mat[-burn.in,j]), lwd=1, col=2) #observed proportion
}
par(mfrow=c(2,3))
for (j in 15:20){
pi.mat <- expit(phi.mat[-burn.in, j])
hist(pi.mat, nclass=50, main=bquote(pi[.(j)]), ylab=bquote(pi[.(j)]),
xlab="iteration", col=gray(0.9))
abline(v=y.data[j]/m[j], lwd=1, col="blue") #observed proportion
}
#par(mfrow=c(1,2))
mu.t <- expit(mu.vec[-burn.in])
hist(mu.t, col=gray(0.85), nclass=100, freq=F, main="Posterior for mu")
abline(v=mean((y.data/m[j])), lwd=2, col=4) #average of observed proportions, #like empirical phi.bar
legend(0.005,400, legend=c("observed proportions average"), col=c(4), lty=c(1,1,1), lwd=c(2,2,2), bty="n", cex=0.6)
quantile(mu.vec, 0.025)
quantile(mu.vec, 0.025, 0.975)
##write model file first
cat("
model
{
for(i in 1:N)
{
logit(pi[i]) <- phi[i]
y[i] ~ dbin(pi[i], n[i])
phi[i] ~ dnorm(mu, tau)
}
mu ~ dnorm(mu.0, K.0*tau)
tau ~ dgamma(a.0, b.0)
sigmasq <- pow(tau, -1)
a.0 <- 0.02
b.0 <- 0.02
K.0 <- 2
mu.0 <- 0
}",
file="jags-stomachcancer.jags")
##jags call
library(R2jags)
set.seed(52)
stomach.data <- list(N=length(y.data), y=y.data, n=m)
inits <- list(list(mu = -4, phi=c(-20:-1), tau = 0.6),
list(mu = -6, phi=c(-1:-20), tau = 0.5),
list(mu = -6, phi =c(-5:-10, -11:-20, -1:-4), tau = 0.3))
n.chain <- 3
#warmup
warmup.stomach <- jags.model("jags-stomachcancer.jags", data=stomach.data, n.chains=n.chain, inits = inits, n.adapt=3000, quiet=TRUE)
#parameters to save
params <- c("phi", "pi", "mu", "tau", "sigmasq")
n.iter=10000
#running the model for real
samples <- coda.samples(warmup.stomach, params, n.iter=n.iter)
#define phi draws and pi draws
phi.draws <- matrix(NA, nrow=n.iter*n.chain, ncol=length(y.data))
for(j in 1:20){
phi.draws[,j] <- as.matrix(samples)[,(j+1)]
}
pi.draws <- matrix(NA, nrow=n.iter*n.chain, ncol=length(y.data))
for(j in 1:20){
pi.draws[,j] <- as.matrix(samples)[,(j+21)]
}
#make histogram of phi draws
par(mfrow=c(2,3))
for (j in 15:20){
hist(phi.draws[,j], nclass=50, main=bquote(phi[.(j)]),
ylab=bquote(phi[.(j)]),
xlab="iteration", col=gray(0.9))
abline(v=logit(y.data[j]/m[j]), lwd=3, col="blue") #observed logit
}
#make histogram of pi draws
for (j in 15:20){
hist(pi.draws[,j], nclass=50, main=bquote(pi[.(j)]),
ylab=bquote(pi[.(j)]),
xlab="iteration", col=gray(0.9))
abline(v=y.data[j]/m[j], lwd=3, col="blue") #observed logit
}
par(mfrow=c(1,2))
mu.draws <- as.matrix(samples)[,1]
#hist of mu draws
hist(mu.draws, xlab=expression(mu), main=expression(mu), nclass=50)
#hist of tau draws
tau.draws <- as.matrix(samples)[,43]
hist(tau.draws, xlab=expression(tau), main=expression(tau), nclass=50)
#####################################################
### Now set up the actual Gibbs sampling algorithm ##
#####################################################
##1. Set values for hyperparameters
## More thought should be put into these in real life!
a.0 <- 0.02
b.0 <- 0.02
K.0 <- 2
mu.0 <- 0
##2. Set up vectors and matrices to store results in
n.gibbs <- 10050
mu.vec <- numeric(n.gibbs)
tau.vec <- numeric(n.gibbs)
phi.mat <- matrix(nrow=n.gibbs, ncol=length(y.data))
jump.vec <- numeric(n.gibbs-1)
##3. Set initial values
mu.vec[1] <- 2  #initial value for mu
tau.vec[1] <- 0.5  #initial value for tau
phi.mat[1,] <- rep(0,length(y.data)) #logit(0.5)=0
##4. NOW Set up the d steps for each iteration ##
for (t in 2:n.gibbs) {
#(a) Update tau
tau.vec[t] <- draw.cc.tau(mu.vec[t-1], phi.mat[t-1,], a.0=a.0, b.0=b.0, mu.0=mu.0)
#(b) Update mu
mu.vec[t] <- draw.cc.mu(tau.vec[t], phi.mat[t-1,], mu.0=mu.0, K.0=K.0)
#(c) Update the vector of phi's
### M-H version  ####
for (j in 1:length(y.data)) {
draw.and.jump <- MH.draw.cc.phi(phi.mat[t-1,j], tuning=4, y.i=y.data[j], m=m[j], mu=mu.vec[t], tau=tau.vec[t])
phi.mat[t,j] <- draw.and.jump[1]
jump.vec[t-1] <- draw.and.jump[2]
}
}
#mean(jump.vec)
#jump.vec[1:10]
mu.jagspi <- quantile(mu.draws, 0.025, 0.975)
mu.gibbsci
mu.gibbspi <- c(quantile(mu.vec, 0.025, 0.975))
mu.jagspi <- quantile(mu.draws, 0.025, 0.975)
mu.gibbspi
mu.jagspi
mu.gibbspi <- c(quantile(mu.vec, 0.025), quantile(mu.vec, 0.975))
mu.gibbspi
mu.jagspi <- c(quantile(mu.draws, 0.025), quantile(mu.draws, 0.975))
mu.jagspi
tau.gibbspi <- c(quantile(tau.vec, 0.025), quantile(tau.vec, 0.975))
tau.jagspi <- c(quantile(tau.draws, 0.025), quantile(tau.draws, 0.975))
head(phi.mat)
head(phi.draws)
for(j in 15:20){
phi.gibbspi <- c(quantile(phi.mat[,j], 0.025), quantile(phi.mat[,j], 0.975))
phi.jagspi <- c(quantile(phi.draws[,j], 0.025),
quantile(phi.draws[,j], 0.975))
}
phi.gibbspi
phi.gibbspi <- numeric(length(y.data))
phi.jagspi <- numeric(length(y.data))
for(j in 15:20){
phi.gibbspi[j] <- c(quantile(phi.mat[,j], 0.025), quantile(phi.mat[,j], 0.975))
phi.jagspi[j] <- c(quantile(phi.draws[,j], 0.025),
quantile(phi.draws[,j], 0.975))
}
phi.gibbspi <- matrix(NA, nrow=length(y.data), ncol=2)
phi.jagspi <- matrix(NA, nrow=length(y.data), ncol=2)
for(j in 15:20){
phi.gibbspi[j] <- c(quantile(phi.mat[,j], 0.025), quantile(phi.mat[,j], 0.975))
phi.jagspi[j] <- c(quantile(phi.draws[,j], 0.025),
quantile(phi.draws[,j], 0.975))
}
phi.gibbspi <- matrix(NA, nrow=length(y.data), ncol=2)
phi.jagspi <- matrix(NA, nrow=length(y.data), ncol=2)
for(j in 15:20){
phi.gibbspi[j,] <- c(quantile(phi.mat[,j], 0.025), quantile(phi.mat[,j], 0.975))
phi.jagspi[j,] <- c(quantile(phi.draws[,j], 0.025),
quantile(phi.draws[,j], 0.975))
}
phi.gibbspi
phi.jagspi
for(j in 1:20){
phi.gibbspi[j,] <- c(quantile(phi.mat[,j], 0.025), quantile(phi.mat[,j], 0.975))
phi.jagspi[j,] <- c(quantile(phi.draws[,j], 0.025),
quantile(phi.draws[,j], 0.975))
}
phi.gibbspi
phi.jagspi
mu.gibbspi
gibbs <- c(mu.gibbspi, tau.gibbspi, phi.gibbspi[15:20,])
gibbs
gibbs <- rbind(mu.gibbspi, tau.gibbspi, phi.gibbspi[15:20,])
gibbs
jags <- rbind(mu.jagspi, tau.jagspi, phi.jagspi[15:20,])
jags
table <- cbind(a, gibbs, jags)
a <- c("mu", "tau", "phi_15", "phi_16", "phi_17", "phi_18", "phi_19", "phi_20")
gibbs <- rbind(mu.gibbspi, tau.gibbspi, phi.gibbspi[15:20,])
jags <- rbind(mu.jagspi, tau.jagspi, phi.jagspi[15:20,])
table <- cbind(a, gibbs, jags)
table
str(mu.gibbspi)
table(mu.gibbspi)
mu.gibbspi[2]
require(xtable)
xtable(table)
?xtable
xtable(table, digits=3)
mygibbs <- as.numeric(rbind(mu.gibbspi, tau.gibbspi, phi.gibbspi[15:20,]))
jags <- rbind(mu.jagspi, tau.jagspi, phi.jagspi[15:20,])
table <- cbind(parameter, mygibbs, jags)
require(xtable)
xtable(table, digits=3)
mygibbs <- as.numeric(rbind(mu.gibbspi, tau.gibbspi, phi.gibbspi[15:20,]))
jags <- rbind(mu.jagspi, tau.jagspi, phi.jagspi[15:20,])
mygibbs <- as.numeric(rbind(mu.gibbspi, tau.gibbspi, phi.gibbspi[15:20,]))
jags <- rbind(mu.jagspi, tau.jagspi, phi.jagspi[15:20,])
table <- cbind(parameter, mygibbs, jags)
parameter <- c("mu", "tau", "phi_15", "phi_16", "phi_17", "phi_18", "phi_19", "phi_20")
mygibbs <- as.numeric(rbind(mu.gibbspi, tau.gibbspi, phi.gibbspi[15:20,]))
jags <- rbind(mu.jagspi, tau.jagspi, phi.jagspi[15:20,])
table <- cbind(parameter, mygibbs, jags)
require(xtable)
xtable(table, digits=3)
is.numeric(mygibbs)
is.numeric(jags)
xtable(table, digits=c(3,3,3,3))
xtable(table, digits=c(3,3, 3,3,3,3))
xtable(table, digits=c(3,3,3,3,3))
is.numeric(jags)
str(jags)
is.numeric(jags[2])
is.numeric(jags[1,2])
xtable(table)
parameter <- c("mu", "tau", "phi_15", "phi_16", "phi_17", "phi_18", "phi_19", "phi_20")
mygibbs <- rbind(mu.gibbspi, tau.gibbspi, phi.gibbspi[15:20,])
jags <- rbind(mu.jagspi, tau.jagspi, phi.jagspi[15:20,])
table <- cbind(parameter, mygibbs, jags)
require(xtable)
xtable(table)
mu.gibbsmean <- mean(mu.vec)
mu.jagsmean <- mean(mu.draws)
mu.gibbsmean
mu.jagsmean
tau.gibbsmean <- mean(tau.vec)
tau.jagsmean <- mean(tau.draws)
phi.gibbsmean <- numeric(length(y.data))
phi.jagasmean <- numeric(length(y.data))
for(j in 1:20){
phi.gibbspi[j,] <- c(quantile(phi.mat[,j], 0.025), quantile(phi.mat[,j], 0.975))
phi.jagspi[j,] <- c(quantile(phi.draws[,j], 0.025),
quantile(phi.draws[,j], 0.975))
phi.gibbsmean[j] <- mean(phi.mat[,j])
phi.jagsmean[j] <- mean(phi.draws[,j])
}
phi.gibbsmean <- numeric(length(y.data))
phi.jagsmean <- numeric(length(y.data))
for(j in 1:20){
phi.gibbspi[j,] <- c(quantile(phi.mat[,j], 0.025), quantile(phi.mat[,j], 0.975))
phi.jagspi[j,] <- c(quantile(phi.draws[,j], 0.025),
quantile(phi.draws[,j], 0.975))
phi.gibbsmean[j] <- mean(phi.mat[,j])
phi.jagsmean[j] <- mean(phi.draws[,j])
}
mygibbs.mean <- rbind(mu.gibbsmean, tau.gibbsmean, phi.gibbsmean[15:20])
jags.mean <- rbind(mu.jagsmean, tau.jagsmean, phi.jagsmean[15:20])
table <- cbind(parameter, mygibbs, jags, mygibbs.mean, jags.mean)
mygibbs.mean
jags.mean <- cbind(mu.jagsmean, tau.jagsmean, phi.jagsmean[15:20])
table <- cbind(parameter, mygibbs, jags, mygibbs.mean, jags.mean)
mygibbs.mean <-crbind(mu.gibbsmean, tau.gibbsmean, phi.gibbsmean[15:20])
jags.mean <- cbind(mu.jagsmean, tau.jagsmean, phi.jagsmean[15:20])
table <- cbind(parameter, mygibbs, jags, mygibbs.mean, jags.mean)
mygibbs.mean
mygibbs.mean <-cbind(mu.gibbsmean, tau.gibbsmean, phi.gibbsmean[15:20])
jags.mean <- cbind(mu.jagsmean, tau.jagsmean, phi.jagsmean[15:20])
table <- cbind(parameter, mygibbs, jags, mygibbs.mean, jags.mean)
mygibbs.mean
mygibbs.mean <- c(mu.gibbsmean, tau.gibbsmean, phi.gibbsmean[15:20])
mygibbs.mean
jags.mean <- c(mu.jagsmean, tau.jagsmean, phi.jagsmean[15:20])
table <- cbind(parameter, mygibbs, jags, mygibbs.mean, jags.mean)
require(xtable)
xtable(table)
mygibbs.mean
jags.mean
postphi.fun <- function(phi, y, n, mu, sigma){
exp(phi)^y*(1+exp(phi))^(-n)*exp(-(phi-mu)^2/(2*sigma^2))
}
phi.vals <- data.frame(phi=seq(-2,2,by=0.01))
phipost.out <- apply(phi.vals, 1, postphi.fun, y = 5, n = 10, mu = 0, sigma = 2)
par(mfrow=c(1,2))
plot(phi.vals$phi, phipost.out, type="l", xlab=expression(phi), ylab=expression(f(phi)))
logpost <- -log(phipost.out)
plot(phi.vals$phi, logpost, type="l", xlab=expression(phi), ylab=expression(-logf(phi)))
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*e^{phi}/(1+e^{phi})+(phi-mu)/sigma^2
}
dlogpost.out <- apply(cbind(phi.vals), 1, dlogpost, y=5, n=10, mu=0, sigma=2)
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*exp(phi)/(1+exp(phi))+(phi-mu)/sigma^2
}
dlogpost.out <- apply(cbind(phi.vals), 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals, dlogpost.out)
plot(phi.vals, dlogpost.out)
dlogpost.out <- apply(phi.vals, 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals$phi, dlogpost.out)
par(mfrow=c(1,3))
postphi.fun <- function(phi, y, n, mu, sigma){
exp(phi)^y*(1+exp(phi))^(-n)*exp(-(phi-mu)^2/(2*sigma^2))
}
phi.vals <- data.frame(phi=seq(-2,2,by=0.01))
phipost.out <- apply(phi.vals, 1, postphi.fun, y = 5, n = 10, mu = 0, sigma = 2)
par(mfrow=c(1,2))
plot(phi.vals$phi, phipost.out, type="l", xlab=expression(phi), ylab=expression(f(phi)))
logpost <- -log(phipost.out)
plot(phi.vals$phi, logpost, type="l", xlab=expression(phi), ylab=expression(-logf(phi)))
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*exp(phi)/(1+exp(phi))+(phi-mu)/sigma^2
}
dlogpost.out <- apply(phi.vals, 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals$phi, dlogpost.out, type="l")
par(mfrow=c(1,3))
par(mfrow=c(1,3))
postphi.fun <- function(phi, y, n, mu, sigma){
exp(phi)^y*(1+exp(phi))^(-n)*exp(-(phi-mu)^2/(2*sigma^2))
}
phi.vals <- data.frame(phi=seq(-2,2,by=0.01))
phipost.out <- apply(phi.vals, 1, postphi.fun, y = 5, n = 10, mu = 0, sigma = 2)
par(mfrow=c(1,2))
plot(phi.vals$phi, phipost.out, type="l", xlab=expression(phi), ylab=expression(f(phi)))
logpost <- -log(phipost.out)
plot(phi.vals$phi, logpost, type="l", xlab=expression(phi), ylab=expression(-logf(phi)))
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*exp(phi)/(1+exp(phi))+(phi-mu)/sigma^2
}
dlogpost.out <- apply(phi.vals, 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals$phi, dlogpost.out, type="l")
par(mfrow=c(1,3))
postphi.fun <- function(phi, y, n, mu, sigma){
exp(phi)^y*(1+exp(phi))^(-n)*exp(-(phi-mu)^2/(2*sigma^2))
}
phi.vals <- data.frame(phi=seq(-2,2,by=0.01))
phipost.out <- apply(phi.vals, 1, postphi.fun, y = 5, n = 10, mu = 0, sigma = 2)
plot(phi.vals$phi, phipost.out, type="l", xlab=expression(phi), ylab=expression(f(phi)))
logpost <- -log(phipost.out)
plot(phi.vals$phi, logpost, type="l", xlab=expression(phi), ylab=expression(-logf(phi)))
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*exp(phi)/(1+exp(phi))+(phi-mu)/sigma^2
}
dlogpost.out <- apply(phi.vals, 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals$phi, dlogpost.out, type="l")
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi))
par(mfrow=c(1,3))
postphi.fun <- function(phi, y, n, mu, sigma){
exp(phi)^y*(1+exp(phi))^(-n)*exp(-(phi-mu)^2/(2*sigma^2))
}
phi.vals <- data.frame(phi=seq(-2,2,by=0.01))
phipost.out <- apply(phi.vals, 1, postphi.fun, y = 5, n = 10, mu = 0, sigma = 2)
plot(phi.vals$phi, phipost.out, type="l", xlab=expression(phi), ylab=expression(f(phi)))
logpost <- -log(phipost.out)
plot(phi.vals$phi, logpost, type="l", xlab=expression(phi), ylab=expression(-logf(phi)))
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*exp(phi)/(1+exp(phi))+(phi-mu)/sigma^2
}
dlogpost.out <- apply(phi.vals, 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi))
par(mfrow=c(1,3))
postphi.fun <- function(phi, y, n, mu, sigma){
exp(phi)^y*(1+exp(phi))^(-n)*exp(-(phi-mu)^2/(2*sigma^2))
}
phi.vals <- data.frame(phi=seq(-2,2,by=0.01))
phipost.out <- apply(phi.vals, 1, postphi.fun, y = 5, n = 10, mu = 0, sigma = 2)
plot(phi.vals$phi, phipost.out, type="l", xlab=expression(phi), ylab=expression(f(phi)))
logpost <- -log(phipost.out)
plot(phi.vals$phi, logpost, type="l", xlab=expression(phi), ylab=expression(-logf(phi)))
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*exp(phi)/(1+exp(phi))+(phi-mu)/sigma^2
}
dlogpost.out <- apply(phi.vals, 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(d/dphi(-logf(phi))
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(d/dphi(-logf(phi)))
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(d/dphi(-logf(phi)))
@
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(d/dphi(-logf(phi))))
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(d/dphi(-logf(phi))))
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(d/dphi(-logf(phi))))
@
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(d/d phi(-logf(phi))))
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(deriv(-logf(phi))))
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(deriv phi(-logf(phi))))
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(derivphi(-logf(phi))))
par(mfrow=c(1,3))
postphi.fun <- function(phi, y, n, mu, sigma){
exp(phi)^y*(1+exp(phi))^(-n)*exp(-(phi-mu)^2/(2*sigma^2))
}
phi.vals <- data.frame(phi=seq(-2,2,by=0.01))
phipost.out <- apply(phi.vals, 1, postphi.fun, y = 5, n = 10, mu = 0, sigma = 2)
plot(phi.vals$phi, phipost.out, type="l", xlab=expression(phi), ylab=expression(f(phi)), ylab=expression(f(phi)))
logpost <- -log(phipost.out)
plot(phi.vals$phi, logpost, type="l", xlab=expression(phi), ylab=expression(-logf(phi)), ylab=expression(-logf(phi)))
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*exp(phi)/(1+exp(phi))+(phi-mu)/sigma^2
}
dlogpost.out <- apply(phi.vals, 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(derivphi(-logf(phi))), main=ylab=expression(derivphi(-logf(phi))))
par(mfrow=c(1,3))
postphi.fun <- function(phi, y, n, mu, sigma){
exp(phi)^y*(1+exp(phi))^(-n)*exp(-(phi-mu)^2/(2*sigma^2))
}
phi.vals <- data.frame(phi=seq(-2,2,by=0.01))
phipost.out <- apply(phi.vals, 1, postphi.fun, y = 5, n = 10, mu = 0, sigma = 2)
plot(phi.vals$phi, phipost.out, type="l", xlab=expression(phi), ylab=expression(f(phi)), main=expression(f(phi)))
logpost <- -log(phipost.out)
plot(phi.vals$phi, logpost, type="l", xlab=expression(phi), ylab=expression(-logf(phi)), main=expression(-logf(phi)))
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*exp(phi)/(1+exp(phi))+(phi-mu)/sigma^2
}
dlogpost.out <- apply(phi.vals, 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(derivphi(-logf(phi))), main=ylab=expression(derivphi(-logf(phi))))
par(mfrow=c(1,3))
postphi.fun <- function(phi, y, n, mu, sigma){
exp(phi)^y*(1+exp(phi))^(-n)*exp(-(phi-mu)^2/(2*sigma^2))
}
phi.vals <- data.frame(phi=seq(-2,2,by=0.01))
phipost.out <- apply(phi.vals, 1, postphi.fun, y = 5, n = 10, mu = 0, sigma = 2)
plot(phi.vals$phi, phipost.out, type="l", xlab=expression(phi), ylab=expression(f(phi)), main=expression(f(phi)))
logpost <- -log(phipost.out)
plot(phi.vals$phi, logpost, type="l", xlab=expression(phi), ylab=expression(-logf(phi)), main=expression(-logf(phi)))
dlogpost <- function(phi, y, n, mu, sigma){
-y+n*exp(phi)/(1+exp(phi))+(phi-mu)/sigma^2
}
dlogpost.out <- apply(phi.vals, 1, dlogpost, y=5, n=10, mu=0, sigma=2)
plot(phi.vals$phi, dlogpost.out, type="l", xlab=expression(phi), ylab=expression(derivphi(-logf(phi))), main=expression(derivphi(-logf(phi))))
source("roll.R")
setwd("~/Documents/Stat532/homeworks/bayeshw8")
source("roll.R")
roll(0, postphi.fun, dlogpost)
roll(0, postphi.fun, dlogpost)
roll(0, postphi.fun, dlogpost)
require(rstan)
install.packages("rstan")
require(rstan)
stan1 <- stan_model(file = "./sample_normal.stan", model_name = "normal")
samp1 <- sampling(stan1, chains = 4, iter = 2000)
theta <- extract(samp1)$theta
hist(theta, freq = F)
curve(dnorm(x, 0, 1), add = T)
is.mcmc(samp1)
extract(samples)
head(samp1)
samp1
str(samp1)
is.mcmc(theta.)
is.mcmc(theta)
head(theta)
theta
help(package="rstan")
data(mtcars)
head(mtcars)
lm(mpg ~ hp + cyl + wt, mtcars)
cars.data <- with(mtcars, list(y = mpg, x = cbind(rep(1, length(mpg)), hp, cyl, wt),
N = length(mpg), p = 4))
stan2 <- stan_model(file = "./sample_lm.stan", model_name = "lm")
samp2 <- sampling(stan2, chains = 4, iter = 2000, data = cars.data)
samp2
N <- 100
y <- rexp(N, 1 / 200)
hist(y)
?rexp
C <- 250
idx <- which(y > C)
yobs <- y[-idx]
Ncens <- length(idx)
cens_data <- list(y = yobs, N = N, Ncens = Ncens, C = C)
stan3 <- stan_model(file = "./sample_cens.stan", model_name = "censored")
samp3 <- sampling(stan3, chains = 4, iter = 2000, data = cens_data)
samp3
theta
mcmc(theta)
