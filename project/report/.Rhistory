?rlognorm
omega <- rlognorm(log(7.5), sd = log(1.1))
omega <- rnorm(log(7.5), sd = log(1.1), log = TRUE)
?rnorm
??rlnorm
omega <- rlnorm(1, log(7.5), sd = log(1.1))
?skewnorm
??skewnorm
require(sn)
set.seed(205)
#set values of parameters - done the same way as described in the paper on pg 12
S <- 10000
theta <- 7.0
psi <- rnorm(1, 185, sd = 2.5)
omega <- rlnorm(1, log(7.5), sd = log(1.1))
alpha <- -2
omega
alpha
psi
theta
#plot run curve with these parameters
require(sn)
x <- seq(80, 220, by=0.01)
plot(x, dsn(x, xi = psi, omega = omega, alpha = alpha), type="l", main="Skew normal run curve")
legend(180, 0.037, c("alpha=-2"), lty=c(1), col=c("black"), cex=0.6)
#plot run curve with these parameters
require(sn)
x <- seq(150, 220, by=0.01)
plot(x, dsn(x, xi = psi, omega = omega, alpha = alpha), type="l", main="Skew normal run curve")
legend(180, 0.037, c("alpha=-2"), lty=c(1), col=c("black"), cex=0.6)
#plot run curve with these parameters
require(sn)
x <- seq(150, 220, by=0.01)
plot(x, dsn(x, xi = psi, omega = omega, alpha = alpha), type="l", main="Skew normal run curve")
legend(150, 0.037, c("alpha=-2"), lty=c(1), col=c("black"), cex=0.6)
lines(x, dsn(x, psi, omega, alpha=2), col="red", lty=5)
?dnbinom
p.t.fun <- function(t, psi, omega, alpha) {
dsn(t, psi, omega, alpha)
}
t <- 150:200
p.t <- p.t.fun(t)
p.t <- p.t.fun(t, psi, omega, alpha)
p.t
c.t <- numeric(length(p.t))
for(i in 1:length(t)) {
c.t[i] <- S*(p.t[t] - p.t[t-1])
}
c.t <- numeric(length(p.t))
for(i in 1:length(t)) {
c.t[i] <- S*(p.t[i] - p.t[i-1])
}
p.t <- p.t.fun(t, psi, omega, alpha)
c.t <- numeric(length(p.t))
for(i in 1:length(t)) {
c.t[i] <- S*(p.t[i] - p.t[i-1])
}
S
c.t <- numeric(length(t))
c.t[1] <- p.t[1]
for(i in 2:length(t)) {
c.t[i] <- S*(p.t[i] - p.t[i-1])
}
c.t
t <- 150:220
p.t <- p.t.fun(t, psi, omega, alpha)
p.t
hist(p.t)
plot(t, p.t)
plot(t, c.t)
length(t)
length(p.t)
length(c.t)
# calculate p_t, the cumulative prop of the run that has passed weir @ time step t
p.t.fun <- function(t, psi, omega, alpha) {
dsn(t, psi, omega, alpha)
}
t <- 150:220
p.t <- p.t.fun(t, psi, omega, alpha)
c.t <- numeric(length(t))
c.t[1] <- p.t[1]
for(i in 2:length(t)) {
c.t[i] <- S*(p.t[i] - p.t[i-1])
}
length(c.t)
plot(t, c.t)
lambda <- theta/(theta + c.t)
lambda
?nbinom
??rnbinom
lambda <- theta/(theta + c.t)
lambda
c.t.0 <- rnbinom(1, size = theta, prob = lambda)
c.t.0
c.t.0.fun <- function(lambda, theta) {
rnbinom(1, size = theta, prob = lambda)
}
c.t.0 <- apply(cbind(lambda), c.t.0.fun, theta = theta)
c.t.0 <- apply(cbind(lambda), 1, c.t.0.fun, theta = theta)
lambda <- theta/(theta + c.t)
c.t.0.fun <- function(lambda, theta) {
rnbinom(1, size = theta, prob = lambda)
}
c.t.0 <- apply(cbind(lambda), 1, c.t.0.fun, theta = theta)
cbind(lambda)
c.t.0
?dsn
# calculate p_t, the cumulative prop of the run that has passed weir @ time step t
p.t.fun <- function(t, psi, omega, alpha) {
psn(t, psi, omega, alpha)
}
t <- 150:220
p.t <- p.t.fun(t, psi, omega, alpha)
c.t <- numeric(length(t))
c.t[1] <- p.t[1]
for(i in 2:length(t)) {
c.t[i] <- S*(p.t[i] - p.t[i-1])
}
#look at p.t and c.t to make sure they worked
#plot(t, p.t)
#plot(t, c.t)
c.t
plot(t, c.t)
lambda <- theta/(theta + c.t)
c.t.0.fun <- function(lambda, theta) {
rnbinom(1, size = theta, prob = lambda)
}
c.t.0 <- apply(cbind(lambda), 1, c.t.0.fun, theta = theta)
c.t0
c.t.0
plot(t, c.t.0, type="l", lty=3, lwd=2)
c.t.0 <- apply(cbind(lambda), 1, c.t.0.fun, theta = theta)
plot(t, c.t.0, type="l", lty=3, lwd=2)
plot(t, c.t.0, lty=3, lwd=2)
lines(t, c.t, lwd=2)
plot(t, c.t.0, lwd=2)
lines(t, c.t, lwd=2)
set.seed(205)
#set values of parameters - done the same way as described in the paper on pg 12
S <- 10000
theta <- 7.0
run.mu <- rnorm(1, 185, sd = 2.5)
run.sd <- rlnorm(1, log(7.5), sd = log(1.1))
skew <- -2
#plot run curve with these parameters
require(sn)
x <- seq(160, 230, by=0.01)
plot(x, dsn(x, xi = run.mu, omega = run.sd, alpha = skew), type="l", main="Skew normal run curve")
#lines(x, dsn(x, psi, omega, alpha=2), col="red", lty=5)
legend(150, 0.037, c("skew=-2"), lty=c(1), col=c("black"), cex=0.6)
#plot run curve with these parameters
require(sn)
x <- seq(220, 230, by=0.01)
plot(x, dsn(x, xi = run.mu, omega = run.sd, alpha = skew), type="l", main="Skew normal run curve")
#lines(x, dsn(x, psi, omega, alpha=2), col="red", lty=5)
legend(150, 0.037, c("skew=-2"), lty=c(1), col=c("black"), cex=0.6)
#plot run curve with these parameters
require(sn)
x <- seq(160, 230, by=0.01)
plot(x, dsn(x, xi = run.mu, omega = run.sd, alpha = skew), type="l", main="Skew normal run curve")
#lines(x, dsn(x, psi, omega, alpha=2), col="red", lty=5)
legend(220, 0.037, c("skew=-2"), lty=c(1), col=c("black"), cex=0.6)
#plot run curve with these parameters
require(sn)
x <- seq(160, 230, by=0.01)
plot(x, dsn(x, xi = run.mu, omega = run.sd, alpha = skew), type="l", main="Skew normal run curve")
#lines(x, dsn(x, psi, omega, alpha=2), col="red", lty=5)
legend(200, 0.037, c("skew=-2"), lty=c(1), col=c("black"), cex=0.6)
# calculate p_t, the cumulative prop of the run that has passed weir @ time step t
p.t.fun <- function(t, run.mu, run.sd, skew) {
psn(t, xi = run.mu, omega = run.sd, alpha = skew)
}
t <- 1:365
p.t <- p.t.fun(t, run.mu, run.sd, skew)
c.t <- numeric(length(t))
c.t[1] <- p.t[1]
for(i in 2:length(t)) {
c.t[i] <- S*(p.t[i] - p.t[i-1])
}
#look at p.t and c.t to make sure they worked
#plot(t, p.t)
#plot(t, c.t)
win.data <- list(Date=obs.dat.v$Date,Count=obs.dat.v$Count,T=length(obs.dat.v$Count),invl=20)
set.seed(0) # set random seed if desired
# Normal-curve shaped arrival model parameters
true.day.v <- 1:365 # model time steps, modeled as 24 hour days, e.g. Julian days
skew <- 0 # force skew to zero
run.mu <- 185 # results in a mode on approximately 4th of July peak run
run.sd <- 7.5 # produces a run of about 40 days long
S <- 10000 # 10k fish run
# simulate run arrival under the arrival model
# for convenience the sn package is used, defining a skewnormal with shape = 0, i.e. Normal distribution
true.run.v <- S*(psn(true.day.v,xi=run.mu,omega=run.sd,alpha=skew,engine="biv.nt.prob") -
psn(true.day.v-1,xi=run.mu,omega=run.sd,alpha=skew, engine="biv.nt.prob"))
# simulate observed data under process error
real.dat.v <- rnbinom(n=length(true.run.v),mu=true.run.v,size=7) # overdispersion based on Pacific salmon data
# note, ignore NA warnings here as these are due to rounding issues producing very small negative counts in tails
Simulate observations at the weir with missing data following the "Weekends Off" scenario (observe 5, miss 2 days, ...)
obs.start <- 160 # first day to observe at weir, e.g. June 9th by this example
obs.end <- 210 # last day to observe at weir, e.g. July 29th by this example
obs.dat.v <- data.frame(Date=true.day.v[obs.start:obs.end],Count=real.dat.v[obs.start:obs.end])
obs.dat.v <- rbind(data.frame(Date=144:145,Count=0),
obs.dat.v,data.frame(Date=225:226,Count=0))
`%notin%`<- Negate(`%in%`) # helper function
knockout.date.v <- obs.dat.v[1:nrow(obs.dat.v) %in%
c(seq(from=6,to=nrow(obs.dat.v),by=7),seq(from=7,to=nrow(obs.dat.v),by=7)),"Date"]
knockout.passage.v <- obs.dat.v[obs.dat.v$Date %in% knockout.date.v,"Count"] # missed passages
obs.dat.v <- obs.dat.v[obs.dat.v$Date %notin% knockout.date.v,]
plot(x=obs.dat.v$Date,y=obs.dat.v$Count,xlim=c(125,265),ylim=c(0,1.5*max(obs.dat.v$Count)),type="p",col="red",
pch=19,bty="l",xlab="Sample date (Julian day)",ylab="Passage count (fish)")
points(x=knockout.date.v,y=knockout.passage.v,pch=19)
lines(x=true.day.v[150:250],real.dat.v[150:250],type="l")
lines(x=true.day.v[150:250],true.run.v[150:250],type="l",col="red",lwd=2)
legend(x="topright",legend=c("Arrival model","Realized passage with process error","Missed passage date"),
lty=c(1,1,1),lwd=2,seg.len=c(2,0,0),pch=19,pt.cex=c(0,1.25,1.25),col=c("red","red","black"),bty="n", cex=.8)
win.data <- list(Date=obs.dat.v$Date,Count=obs.dat.v$Count,T=length(obs.dat.v$Count),invl=20)
s.date <- win.data$Date[1]
e.date <- win.data$Date[length(win.data$Date)]
`%notin%`<- Negate(`%in%`) # helper function
miss.dates <- seq(from=s.date,to=e.date,by=1)[seq(from=s.date,to=e.date,by=1) %notin% win.data$Date]
win.data$MDate <- miss.dates
win.data$M <- length(miss.dates)
head(win.data)
s.date
s.date
e.date
win.data <- list(Date=obs.dat.v$Date,Count=obs.dat.v$Count,T=length(obs.dat.v$Count),
invl=20)
head(win.data)
miss.dates <- seq(from=s.date,to=e.date, by=1)[seq(from=s.date,to=e.date,by=1) %notin% win.data$Date]
win.data$MDate <- miss.dates
win.data$M <- length(miss.dates)
head(win.data)
